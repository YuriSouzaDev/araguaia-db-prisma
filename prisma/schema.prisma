// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Brand {
  id               Int       @id @default(autoincrement())
  name             String    @unique
  imageUrl         String
  isArchived       Boolean   @default(false)
  createdBy        User      @relation("BrandCreatedBy", fields: [createdById], references: [id])
  createdById      Int
  lastModifiedBy   User?     @relation("BrandLastModifiedBy", fields: [lastModifiedById], references: [id])
  lastModifiedById Int?
  vehicles         Vehicle[]
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
}

model Optional {
  id               Int       @id @default(autoincrement())
  name             String    @unique
  createdBy        User      @relation("OptionalCreatedBy", fields: [createdById], references: [id])
  createdById      Int
  lastModifiedBy   User?     @relation("OptionalLastModifiedBy", fields: [lastModifiedById], references: [id])
  lastModifiedById Int?
  vehicles         Vehicle[] @relation("VehicleOptionals")
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
}

model Vehicle {
  id               Int        @id @default(autoincrement())
  name             String
  createdBy        User       @relation("VehicleCreatedBy", fields: [createdById], references: [id])
  createdById      Int
  lastModifiedBy   User?      @relation("VehicleLastModifiedBy", fields: [lastModifiedById], references: [id])
  lastModifiedById Int?
  brandId          Int
  brand            Brand      @relation(fields: [brandId], references: [id])
  optionals        Optional[] @relation("VehicleOptionals")
  Images           Image[]
  createdAt        DateTime   @default(now())
  updatedAt        DateTime   @updatedAt
}

model Image {
  id        Int      @id @default(autoincrement())
  vehicleId Int
  vehicle   Vehicle  @relation(fields: [vehicleId], references: [id], onDelete: Cascade)
  url       String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([vehicleId])
}

model User {
  id                    Int        @id @unique @default(autoincrement())
  name                  String
  lastName              String
  userName              String     @unique
  email                 String     @unique
  avatar                String
  role                  String     @default("Vendedor")
  password              String
  createdBrands         Brand[]    @relation("BrandCreatedBy")
  lastModifiedBrands    Brand[]    @relation("BrandLastModifiedBy")
  createdOptionals      Optional[] @relation("OptionalCreatedBy")
  lastModifiedOptionals Optional[] @relation("OptionalLastModifiedBy")
  createdVehicles       Vehicle[]  @relation("VehicleCreatedBy")
  lastModifiedVehicles  Vehicle[]  @relation("VehicleLastModifiedBy")
  createdAt             DateTime   @default(now())
  updatedAt             DateTime   @updatedAt
}
